#!/usr/bin/env python

# -*- coding: utf-8 -*- 

import subprocess
import sys
import os.path
import time
import hashlib

from PyQt5 import (QtCore, QtGui)
from PyQt5.QtWidgets import (QWidget, QLabel, QCheckBox, QTextEdit, QLineEdit, QPushButton,
    QFrame, QApplication, QMessageBox, QGridLayout, QComboBox, QFileDialog, QStackedWidget)

def pout(msg : str):
    print(msg)

def ifMsg(text : str, type : int, MODAL:bool = True):
    '''
    0 - None
    1 - Question
    2 - Information
    3 - Warning
    4 - Critical
    '''
    msg = QMessageBox()

    if(type == 0):
        msg.setWindowTitle("")
    elif(type == 1):
        msg.setIcon(QMessageBox.Question)
        msg.setWindowTitle("Question")
    elif(type == 2):
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Info")
    elif(type == 3):
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Warning")
    elif(type == 4):
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Error")

    msg.setText(text)
    msg.setStandardButtons(QMessageBox.Ok)
    msg.setModal(MODAL)
    msg.exec()

def exe(command : str, debug : bool = True) -> tuple:
    '''
    Аргумент - команда для выполнения в терминале. Например: "ls -lai ."
    Возвращает кортеж, где элементы:
        0 - строка stdout
        1 - строка stderr
        2 - returncode
    '''
    if(debug):
        pout(f"> {command}")

    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out = process.stdout.read().decode("utf-8")
    err = process.stderr.read().decode("utf-8") 
    errcode = process.returncode
    return (out, err, errcode)

def exe_orErrorExit(command : str, debug : bool = True) -> tuple:
    out = exe(command, debug)
    if(out[1] != ""):
        error_msg = f"=====\nError: {out[1]}\n====="
        pout(error_msg)
        ifMsg(error_msg, 4)
        exit()
    return out

def is_int(x : str):
    try:
        tempVal = int(x)
        return True
    except:
        return False

def getRandomString(lenght : int = 20) -> str:
    import string
    import random
    S = ''.join(random.choices(string.ascii_uppercase + string.digits, k=lenght))
    return S

def writeToFile(text : str, fileName : str):
    with open(fileName, 'w', encoding="utf-8") as temp:
        temp.write(text)

def createFile(size : int, fileName : str):
    with open(fileName, 'wb') as f:
        f.seek(size-1)
        f.write(b"\0")

def getHashOfFile(filePath : str) -> str:
    buff_BLOCKSIZE = 65536 # 64 kB

    sha = hashlib.sha256()
    with open(filePath, "rb") as temp:
        file_buffer = temp.read(buff_BLOCKSIZE)
        while len(file_buffer) > 0:
            sha.update(file_buffer)
            file_buffer = temp.read(buff_BLOCKSIZE)
    return sha.hexdigest()

def getHashOfString(s : str):
    return hashlib.sha256(s.encode('utf-8')).hexdigest()

def create_inputPasswordScript_inTMP() -> str:
    S = getRandomString()
    scriptFile = f"/tmp/{S}"
    pout(f"Creating sudoInputPasswordScript...")
    exe_orErrorExit(f"touch {scriptFile}")
    exe_orErrorExit(f"chmod 0700 {scriptFile}")
    scriptText = f"#!/bin/bash\nzenity --password --title=\"sudo password prompt\"\n"
    writeToFile(scriptText, scriptFile)
    pout(f"Created: {scriptFile}")
    return scriptFile

class MainWidget(QWidget):

    __grid = None

    __widgetsSelectCombo = None
    __variantsToChoose = ["Create cryptofiledisk", "Open cryptofiledisk", "Close cryptofiledisk", "Info cryptofiledisk", "Create RAM-disk"]
    __stackedWidget = None

    __checkMappersButton = None

    __createWidget = None
    __openWidget = None
    __closeWidget = None
    __infoWidget = None
    __ramWidget = None

    def __init__(self):
        super().__init__()

        global RootPassQueScript
        global rpqsev
        global sysuser
        if(RootPassQueScript == None):
            RootPassQueScript = create_inputPasswordScript_inTMP()
            rpqsev = f"SUDO_ASKPASS=\"{RootPassQueScript}\""
            sysuser = exe_orErrorExit(f"echo -n $USER")[0]

        self.__grid = QGridLayout()

        self.__widgetsSelectCombo = QComboBox(self)
        self.__widgetsSelectCombo.addItems(self.__variantsToChoose)
        self.__widgetsSelectCombo.activated[str].connect(self.__widgetsSelectComboActivated)

        self.__checkMappersButton = QPushButton("Look containers", self)
        self.__checkMappersButton.clicked.connect(lambda:self.__checkMappersButton_hundler())

        self.__createWidget = CreateCryptoDiskWidget()
        self.__openWidget = OpenCryptoDiskWidget()
        self.__closeWidget = CloseCryptoDiskWidget()
        self.__infoWidget = InfoCryptoDiskWidget()
        self.__ramWidget = CreateRamDiskWidget()

        self.__stackedWidget = QStackedWidget(self)
        self.__stackedWidget.addWidget(self.__createWidget)
        self.__stackedWidget.addWidget(self.__openWidget)
        self.__stackedWidget.addWidget(self.__closeWidget)
        self.__stackedWidget.addWidget(self.__infoWidget)
        self.__stackedWidget.addWidget(self.__ramWidget)
        # ЕЩЁ CLOSE

        self.__grid.addWidget(self.__widgetsSelectCombo, 0, 0, 1, 1)
        self.__grid.addWidget(self.__checkMappersButton, 0, 1, 1, 1)
        self.__grid.addWidget(self.__stackedWidget, 1, 0, 1, 2)

        self.setLayout(self.__grid)

        self.show()

    def __widgetsSelectComboActivated(self, text : str):
        i = 0
        for var_i in self.__variantsToChoose:
            if(text == var_i):
                break
            i-=-1
        self.__stackedWidget.setCurrentIndex(i)
    
    def __checkMappersButton_hundler(self):
        anw = exe_orErrorExit("ls /dev/mapper/")
        toOut = "Opened containers: \n"
        anw = anw[0].split()
        for i in range(len(anw)):
            toOut += f"{i+1}) {anw[i]}\n"
        toOut += "\nNot all \"containers\" can be opened by you. \nSome containers are system and you should not touch them. \n"
        ifMsg(toOut, 2)

class FileChooser(QWidget):

    __filePath = None
    __fileButton = None

    __selectedPath = None

    __grid = None

    __type = None

    def __init__(self, type : int):
        '''
        type == 1           is save
        type == 2           is open
        type == 3 or else   is directory
        '''
        super().__init__()

        self.__type = type

        self.__grid = QGridLayout()

        self.__filePath = QLabel(" "*20)
        self.__fileButton = QPushButton("Choose file", self)
        self.__fileButton.clicked.connect(lambda:self.__fileButton_hundler())

        self.__grid.addWidget(self.__filePath, 0, 0)
        self.__grid.addWidget(self.__fileButton, 0, 1)

        self.setLayout(self.__grid)

    def __fileButton_hundler(self):
        curdir = str(os.getcwd())
        if(self.__type == 1):
            filepath = QFileDialog.getSaveFileName(self, "Select file", curdir)[0]
        elif(self.__type == 2):
            filepath = QFileDialog.getOpenFileName(self, "Select file", curdir)[0]
        else: # or elif(self.__type == 3)
            filepath = QFileDialog.getExistingDirectory(self, "Select directory", curdir)
        if(filepath == ""):
            return
        pout(filepath)
        self.__selectedPath = filepath
        self.__filePath.setText(filepath)

    def getPath(self):
        return self.__selectedPath

class CreateCryptoDiskWidget(QWidget):
    '''
    dd if=/dev/zero of=file bs=1M count=100
    mkfs.ext4 file
    echo -n "123" | cryptsetup luksFormat ./test/file -
    https://elephly.net/posts/2013-10-01-dm-crypt.html

    user in:
    where file
    size file
    password
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __fileLabel = None
    __sizeLabel = None
    __passwordLabel = None
    __fileText = None
    __sizeText = None
    __passwordText = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__fileLabel = QLabel("filecryptodisk path: ", self)
        self.__sizeLabel = QLabel("filecryptodisk size (MB): ", self)
        self.__passwordLabel = QLabel("filecryptodisk password: ", self)
        self.__fileText = FileChooser(1)
        self.__sizeText = QLineEdit(self)
        self.__passwordText = QLineEdit(self)
        self.__passwordText.setEchoMode(QLineEdit.Password)

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__fileLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__fileText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__sizeLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__sizeText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__passwordLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__passwordText, 3, 1, 1, 1)
        self.__grid.addWidget(self.__startButton, 4, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__fileText.getPath() == None):
            ifMsg("Enter filecryptodisk path", 4)
            return False
        if(is_int(self.__sizeText.text()) == False):
            ifMsg("Size of filecryptodisk is not number or empty", 4)
            return False
        else:
            a = int(self.__sizeText.text())
            if(a < 1):
                ifMsg("Size of filecryptodisk cannot be zero or negative", 4)
                return False
        if(self.__passwordText.text() == ""):
            ifMsg("Enter filecryptodisk password", 4)
            return False

    def __startButton_handler(self):
        if(self.ifFieldsFilled() == False):
            return
        filePath = os.path.abspath(self.__fileText.getPath())
        pswd = self.__passwordText.text()
        size = int(self.__sizeText.text())
        conRndName = getRandomString(35)
        global rpqsev

        self.__progressText.setText("=====Please wait, filecryptodisk is creating...=====")
        self.__progressText.repaint()

        anw = exe(f"dd if=/dev/zero of={filePath} bs=1M count={size} && sync") # why output in errno?
        pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
        #createFile(size*1024*1024, filePath)
        #anw = exe(f"mkfs.ext4 {filePath}") # why output in errno?
        #pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
        pout(f"> echo -n *** | {rpqsev} sudo --askpass cryptsetup luksFormat {filePath} -")
        exe_orErrorExit(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksFormat {filePath} -", False)

        exe_orErrorExit(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {conRndName} -", False)
        anw = exe(f"{rpqsev} sudo --askpass mkfs.ext4 /dev/mapper/{conRndName}") # why output in errno?
        pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
        time.sleep(5)
        exe_orErrorExit(f"{rpqsev} sudo cryptsetup luksClose {conRndName}")

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()
        pout("\n===== filecryptodisk created =====")
        ifMsg(f"filecryptodisk {filePath} created", 2)

class OpenCryptoDiskWidget(QWidget):
    '''
    mkdir mounted_file/
    echo -n "123" | sudo cryptsetup luksOpen ./test/file ./testrc -
    # testrc - Название контейнера
    #sudo mount -o loop file mounted_file/
    sudo chmod -R 777 mounted_file/

    user in:
        where file
        where mount
        name of container
        password
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __fileLabel = None
    __mountLabel = None
    __containerLabel = None
    __passwordLabel = None
    __fileText = None
    __mountText = None
    __containerText = None
    __passwordText = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__fileLabel = QLabel("filecryptodisk path: ", self)
        self.__mountLabel = QLabel("Where filecryptodisk will be open: ", self)
        self.__containerLabel = QLabel("Container name: ", self)
        self.__passwordLabel = QLabel("filecryptodisk password: ", self)
        self.__fileText = FileChooser(2)
        self.__mountText = FileChooser(3)
        self.__containerText = QLineEdit(self)
        self.__passwordText = QLineEdit(self)
        self.__passwordText.setEchoMode(QLineEdit.Password)

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__fileLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__fileText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__mountLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__mountText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__containerLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__containerText, 3, 1, 1, 1)
        self.__grid.addWidget(self.__passwordLabel, 4, 0, 1, 1)
        self.__grid.addWidget(self.__passwordText, 4, 1, 1, 1)
        self.__grid.addWidget(self.__startButton, 5, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__fileText.getPath() == None):
            ifMsg("Enter filecryptodisk path", 4)
            return False
        if(self.__mountText.getPath() == None):
            ifMsg("Enter where filecryptodisk will be open", 4)
            return False
        if(self.__containerText.text() == ""):
            ifMsg("Enter container name", 4)
            return False
        if(self.__passwordText.text() == ""):
            ifMsg("Enter filecryptodisk password", 4)
            return False

    def __startButton_handler(self):
        if(self.ifFieldsFilled() == False):
            return

        self.__progressText.setText("=====Please wait, filecryptodisk is openning...=====")
        self.__progressText.repaint()

        global rpqsev
        global sysuser
        filePath = os.path.abspath(self.__fileText.getPath())
        mountPath = os.path.abspath(self.__mountText.getPath())
        container = self.__containerText.text()
        pswd = self.__passwordText.text()

        pout(f"> echo -n *** | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {container} -")
        exe_orErrorExit(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {container} -", False)
        exe_orErrorExit(f"{rpqsev} sudo --askpass mount /dev/mapper/{container} {mountPath}")
        exe_orErrorExit(f"{rpqsev} sudo --askpass chown -R {sysuser} {mountPath}")

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()
        pout("\n===== filecryptodisk opened =====")
        ifMsg(f"filecryptodisk {filePath} opened", 2)

class CloseCryptoDiskWidget(QWidget):
    '''
    sudo cryptsetup luksClose testrc
    sudo umount mounted_file/

    user in:
    container name
    mounted dir
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __containerLabel = None
    __mountLabel = None
    __containerText = None
    __mountText = None

    def __init__(self):
        super().__init__()
        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__containerLabel = QLabel("Container name: ", self)
        self.__mountLabel = QLabel("Where filecryptodisk will be open: ", self)
        self.__containerText = QLineEdit(self)
        self.__mountText = FileChooser(3)

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__containerLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__containerText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__mountLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__mountText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__startButton, 3, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__containerText.text() == ""):
            ifMsg("Enter container name", 4)
            return False
        if(self.__mountText.getPath() == None):
            ifMsg("Enter where filecryptodisk will be open", 4)
            return False

    def __startButton_handler(self):
        if(self.ifFieldsFilled() == False):
            return

        self.__progressText.setText("=====Please wait, filecryptodisk is closing...=====")
        self.__progressText.repaint()

        global rpqsev
        container = self.__containerText.text()
        mountPath = os.path.abspath(self.__mountText.getPath())

        exe_orErrorExit(f"{rpqsev} sudo umount {mountPath}")
        exe_orErrorExit(f"{rpqsev} sudo cryptsetup luksClose {container}")

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()
        pout("\n===== filecryptodisk closed =====")
        ifMsg(f"filecryptodisk {container} closed", 2)

class InfoCryptoDiskWidget(QWidget):
    '''
    sudo cryptsetup -v status container

    user in:
                             true/false dir hierarchy
    container name           mounted dir
    '''
    __grid = None

    __startButtonInfo = None
    __startButtonHash = None

    __mainInfoText = None
    __progressText = None

    __infoWelcomeLabel = None
    __hashWelcomeLabel = None

    __infoLabel = None
    __infoText = None
    __hashLabel = None
    __hashText = None
    __hashCheckBox = None

    def __init__(self):
        super().__init__()
        self.__grid = QGridLayout()

        self.__mainInfoText = QLabel("Before using this, you need to open the container", self)
        #self.__infoText.setReadOnly(True) QTextEdit
        self.__progressText = QLabel("Input data below: ", self)
        self.__infoWelcomeLabel = QLabel("Look info", self)
        self.__hashWelcomeLabel = QLabel("Look hash", self)
        self.__infoLabel = QLabel("Container name: ", self)
        self.__infoText = QLineEdit(self)
        self.__hashLabel = QLabel("Where filecryptodisk opened: ", self)
        self.__hashText = FileChooser(3)
        self.__hashCheckBox = QCheckBox("Directory hierarchy", self)
        self.__hashCheckBox.setChecked(True)

        self.__startButtonInfo = QPushButton("Get info", self)
        self.__startButtonInfo.clicked.connect(lambda:self.__startButtonInfo_handler())
        self.__startButtonHash = QPushButton("Get hash", self)
        self.__startButtonHash.clicked.connect(lambda:self.__startButtonHash_handler())

        self.__grid.addWidget(self.__mainInfoText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__progressText, 1, 0, 1, 2)
        self.__grid.addWidget(self.__infoWelcomeLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__hashWelcomeLabel, 2, 1, 1, 1)
        self.__grid.addWidget(self.__infoLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__hashLabel, 3, 1, 1, 1)
        self.__grid.addWidget(self.__infoText, 4, 0, 2, 1)
        self.__grid.addWidget(self.__hashText, 4, 1, 1, 1)
        self.__grid.addWidget(self.__hashCheckBox, 5, 1, 1, 1)
        self.__grid.addWidget(self.__startButtonInfo, 6, 0, 1, 1)
        self.__grid.addWidget(self.__startButtonHash, 6, 1, 1, 1)

        self.setLayout(self.__grid)

    def __startButtonInfo_handler(self):
        if(self.__infoText.text() == ""):
            ifMsg("Enter container name", 4)
            return

        self.__progressText.setText("=====Please wait, getting info of filecryptodisk...=====")
        self.__progressText.repaint()

        global rpqsev
        container = self.__infoText.text()

        anw = exe_orErrorExit(f"{rpqsev} sudo --askpass cryptsetup -v status {container}")

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()
        pout(f"\n===== filecryptodisk info =====\n{anw[0]}")
        ifMsg(f"filecryptodisk {container} info: \n\n{anw[0]}", 2)

    def __startButtonHash_handler(self):
        if(self.__hashText.getPath() == None):
            ifMsg("Enter folder, where container opened", 4)
            return

        self.__progressText.setText("=====Please wait, getting hash of filecryptodisk...=====")
        self.__progressText.repaint()

        mountPath = os.path.abspath(self.__hashText.getPath())

        is_dirHierarchy = self.__hashCheckBox.isChecked()
        hash = self.calcHashOpenedContainer(mountPath, is_dirHierarchy)

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()
        pout(f"\n===== filecryptodisk hash =====\n{hash}")
        ifMsg(f"filecryptodisk hash: \n\n{hash}", 2)
        
    def calcHashOpenedContainer(self, mount_path : str, hierarchyConsider : bool = True) -> str:
        files_buff = [os.path.join(path, name) for path, subdirs, files in os.walk(mount_path) for name in files]
        x = []
        for i in range(len(files_buff)):
            file_i = files_buff[i]
            rel_file = os.path.relpath(file_i, mount_path)
            x.append(rel_file)
        dirs_buff = [os.path.join(path, name) for path, subdirs, files in os.walk(mount_path) for name in subdirs]
        for i in range(len(dirs_buff)):
            file_i = dirs_buff[i]
            rel_file = os.path.relpath(file_i, mount_path)
            x.append(rel_file)

        x = sorted(x)
        files = sorted(files_buff)
        #print(x)
        #print(files)

        from io import StringIO
        o = StringIO()
        for file_i in files:
            o.write(getHashOfFile(  os.path.abspath(file_i)  ))
        hash_files = getHashOfString(o.getvalue())

        o = StringIO()
        for item in x:
            o.write(item)
        hash_hierarchy = getHashOfString(o.getvalue())

        if(hierarchyConsider):
            return getHashOfString(hash_files + hash_hierarchy)
        else:
            return hash_files


class CreateRamDiskWidget(QWidget):
    '''
    https://zalinux.ru/?p=4887
    '''

    __grid = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()
        
        testText = QLabel("Test3", self)
        self.__grid.addWidget(testText, 0, 0)

        self.setLayout(self.__grid)

if __name__ == '__main__':

    RootPassQueScript = None
    rpqsev = None
    sysuser = None

    app = QApplication(sys.argv)

    mainWidget = MainWidget()
    mainWidget.setWindowTitle("filecryptodisk")
    mainWidget.setWindowIcon( QtGui.QIcon("./ico.png") ) # https://github.com/python-pillow/Pillow/issues/4097
    sys.exit(app.exec_())
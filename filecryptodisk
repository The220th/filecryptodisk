#!/usr/bin/env python

# -*- coding: utf-8 -*- 

import subprocess
import sys
import os.path
import time
import hashlib

from PyQt5 import (QtCore, QtGui)
from PyQt5.QtWidgets import (QWidget, QLabel, QCheckBox, QTextEdit, QLineEdit, QPushButton,
    QFrame, QApplication, QMessageBox, QGridLayout, QComboBox, QFileDialog, QStackedWidget)

def pout(msg : str):
    print(msg)

def ifMsg(text : str, type : int, MODAL:bool = True):
    '''
    0 - None
    1 - Question
    2 - Information
    3 - Warning
    4 - Critical
    '''
    msg = QMessageBox()

    if(type == 0):
        msg.setWindowTitle("")
    elif(type == 1):
        msg.setIcon(QMessageBox.Question)
        msg.setWindowTitle("Question")
    elif(type == 2):
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Info")
    elif(type == 3):
        msg.setIcon(QMessageBox.Warning)
        msg.setWindowTitle("Warning")
    elif(type == 4):
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Error")

    msg.setText(text)
    msg.setStandardButtons(QMessageBox.Ok)
    msg.setModal(MODAL)
    msg.exec()

def exe(command : str, debug : bool = True) -> tuple:
    '''
    Аргумент - команда для выполнения в терминале. Например: "ls -lai ."
    Возвращает кортеж, где элементы:
        0 - строка stdout
        1 - строка stderr
        2 - returncode
    '''
    if(debug):
        pout(f"> {command}")

    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out = process.stdout.read().decode("utf-8")
    err = process.stderr.read().decode("utf-8") 
    errcode = process.returncode
    return (out, err, errcode)

def exe_orErrorExit(command : str, debug : bool = True) -> tuple:
    out = exe(command, debug)
    if(out[1] != ""):
        error_msg = f"=====\nError: {out[1]}\n====="
        pout(error_msg)
        ifMsg(error_msg, 4)
        exit()
    return out

def exe_orErrorShow(command : str, debug : bool = True) -> tuple:
    out = exe(command, debug)
    errorNotice = False
    if(out[1] != ""):
        error_msg = f"=====\nError: {out[1]}\n====="
        pout(error_msg)
        ifMsg(error_msg, 4)
        errorNotice = True
    return out + (errorNotice,)

def is_int(x : str):
    try:
        tempVal = int(x)
        return True
    except:
        return False

def getRandomString(lenght : int = 20) -> str:
    import string
    import random
    S = ''.join(random.choices(string.ascii_uppercase + string.digits, k=lenght))
    return S

def writeToFile(text : str, fileName : str):
    with open(fileName, 'w', encoding="utf-8") as temp:
        temp.write(text)

def createFile(size : int, fileName : str):
    with open(fileName, 'wb') as f:
        f.seek(size-1)
        f.write(b"\0")

def getHashOfFile(filePath : str) -> str:
    buff_BLOCKSIZE = 65536 # 64 kB

    sha = hashlib.sha256()
    with open(filePath, "rb") as temp:
        file_buffer = temp.read(buff_BLOCKSIZE)
        while len(file_buffer) > 0:
            sha.update(file_buffer)
            file_buffer = temp.read(buff_BLOCKSIZE)
    return sha.hexdigest()

def getHashOfString(s : str):
    return hashlib.sha256(s.encode('utf-8')).hexdigest()

def create_inputPasswordScript_inTMP() -> str:
    # pkexec better, than SUDO_ASKPASS={RootPassQueScript} sudo --askpass %command%
    # pkexec works if polkit installed
    S = getRandomString()
    scriptFile = f"/tmp/{S}"
    pout(f"Creating sudoInputPasswordScript...")
    exe_orErrorExit(f"touch {scriptFile}")
    exe_orErrorExit(f"chmod 0700 {scriptFile}")
    scriptText = f"#!/bin/bash\nzenity --password --title=\"sudo password prompt\"\n"
    writeToFile(scriptText, scriptFile)
    pout(f"Created: {scriptFile}")
    return scriptFile

def getNormalizedName(BadName: str) -> str:
    #name = os.path.basename(BadName)
    name = BadName
    if(name[0] in "1234567890"):
        name = "_" + name

    forbidden = ",.-+=)(*&?^:%$#@!~`\\/><}{][|№ \"\';"
    for i in forbidden:
        name = name.replace(i, "_")
    return name

class MainWidget(QWidget):

    __grid = None

    __widgetsSelectCombo = None
    __variantsToChoose = ["Create cryptofiledisk", "Open cryptofiledisk", "Close cryptofiledisk", "Info cryptofiledisk", "RAM-disk"]
    __stackedWidget = None

    __checkMappersButton = None

    __createWidget = None
    __openWidget = None
    __closeWidget = None
    __infoWidget = None
    __ramWidget = None

    def __init__(self):
        super().__init__()

        global RootPassQueScript
        global rpqsev
        global sysuser
        if(RootPassQueScript == None):
            RootPassQueScript = create_inputPasswordScript_inTMP()
            rpqsev = f"SUDO_ASKPASS=\"{RootPassQueScript}\""
            sysuser = exe_orErrorExit(f"echo -n $USER")[0]

        self.__grid = QGridLayout()

        self.__widgetsSelectCombo = QComboBox(self)
        self.__widgetsSelectCombo.addItems(self.__variantsToChoose)
        self.__widgetsSelectCombo.activated[str].connect(self.__widgetsSelectComboActivated)

        self.__checkMappersButton = QPushButton("Look containers", self)
        self.__checkMappersButton.clicked.connect(lambda:self.__checkMappersButton_hundler())

        self.__createWidget = CreateCryptoDiskWidget()
        self.__openWidget = OpenCryptoDiskWidget()
        self.__closeWidget = CloseCryptoDiskWidget()
        self.__infoWidget = InfoCryptoDiskWidget()
        self.__ramWidget = CreateRamDiskWidget()

        self.__stackedWidget = QStackedWidget(self)
        self.__stackedWidget.addWidget(self.__createWidget)
        self.__stackedWidget.addWidget(self.__openWidget)
        self.__stackedWidget.addWidget(self.__closeWidget)
        self.__stackedWidget.addWidget(self.__infoWidget)
        self.__stackedWidget.addWidget(self.__ramWidget)
        # ЕЩЁ CLOSE

        self.__grid.addWidget(self.__widgetsSelectCombo, 0, 0, 1, 1)
        self.__grid.addWidget(self.__checkMappersButton, 0, 1, 1, 1)
        self.__grid.addWidget(self.__stackedWidget, 1, 0, 1, 2)

        self.setLayout(self.__grid)

        self.show()

    def __widgetsSelectComboActivated(self, text : str):
        i = 0
        for var_i in self.__variantsToChoose:
            if(text == var_i):
                break
            i-=-1
        self.__stackedWidget.setCurrentIndex(i)
    
    def __checkMappersButton_hundler(self):
        anw = exe_orErrorShow("ls /dev/mapper/")
        toOut = "Opened containers: \n"
        anw = anw[0].split()
        for i in range(len(anw)):
            toOut += f"{i+1}) {anw[i]}\n"
        toOut += "\nNot all \"containers\" can be opened by you. \nSome containers are system and you should not touch them. \n"
        ifMsg(toOut, 2)

class FileChooser(QWidget):

    __filePath = None
    __fileButton = None

    __selectedPath = None

    __grid = None

    __type = None

    __parent = None

    def __init__(self, type : int, parent):
        '''
        type == 1           is save
        type == 2           is open
        type == 3 or else   is directory
        '''
        super().__init__()
        self.__parent = parent

        self.__type = type

        self.__grid = QGridLayout()

        self.__filePath = QLabel(" "*20)
        self.__fileButton = QPushButton("Choose file", self)
        self.__fileButton.clicked.connect(lambda:self.__fileButton_hundler())

        self.__grid.addWidget(self.__filePath, 0, 0)
        self.__grid.addWidget(self.__fileButton, 0, 1)

        self.setLayout(self.__grid)

    def __fileButton_hundler(self):
        curdir = str(os.getcwd())
        if(self.__type == 1):
            filepath = QFileDialog.getSaveFileName(self, "Select file", curdir)[0]
        elif(self.__type == 2):
            filepath = QFileDialog.getOpenFileName(self, "Select file", curdir)[0]
        else: # or elif(self.__type == 3)
            filepath = QFileDialog.getExistingDirectory(self, "Select directory", curdir)
        if(filepath == ""):
            return
        pout(filepath)
        self.__selectedPath = filepath
        self.__filePath.setText(filepath)

    def getPath(self):
        return self.__selectedPath

class CreateCryptoDiskWidget(QWidget):
    '''
    user in:
    where file
    size file
    password
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __fileLabel = None
    __sizeLabel = None
    __passwordLabel = None
    __fileText = None
    __sizeText = None
    __passwordText = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__fileLabel = QLabel("filecryptodisk path: ", self)
        self.__sizeLabel = QLabel("filecryptodisk size (MB): ", self)
        self.__passwordLabel = QLabel("filecryptodisk password: ", self)
        self.__fileText = FileChooser(1, self)
        self.__sizeText = QLineEdit(self)
        self.__passwordText = QLineEdit(self)
        self.__passwordText.setEchoMode(QLineEdit.Password)

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__fileLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__fileText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__sizeLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__sizeText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__passwordLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__passwordText, 3, 1, 1, 1)
        self.__grid.addWidget(self.__startButton, 4, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__fileText.getPath() == None):
            ifMsg("Enter filecryptodisk path", 4)
            return False
        if(is_int(self.__sizeText.text()) == False):
            ifMsg("Size of filecryptodisk is not number or empty", 4)
            return False
        else:
            a = int(self.__sizeText.text())
            if(a < 1):
                ifMsg("Size of filecryptodisk cannot be zero or negative", 4)
                return False
        if(self.__passwordText.text() == ""):
            ifMsg("Enter filecryptodisk password", 4)
            return False

    def __startButton_handler(self):
        self.__progressText.setText("=====Please wait, filecryptodisk is creating...=====")
        self.__progressText.repaint()

        self.__startButton_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButton_handler2(self):
        if(self.ifFieldsFilled() == False):
            return

        filePath = os.path.abspath(self.__fileText.getPath())
        pswd = self.__passwordText.text()
        size = int(self.__sizeText.text())
        conRndName = getRandomString(35)
        global rpqsev

        anw = exe(f"dd if=/dev/zero of={filePath} bs=1M count={size} && sync") # why output in errno?
        pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
        #createFile(size*1024*1024, filePath)
        #anw = exe(f"mkfs.ext4 {filePath}") # why output in errno?
        #pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
        pout(f"> echo -n *** | {rpqsev} sudo --askpass cryptsetup luksFormat {filePath} -")
        anw = exe_orErrorShow(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksFormat {filePath} -", False)
        if(anw[3] == True):
            return

        anw = exe_orErrorShow(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {conRndName} -", False)
        if(anw[3] == True):
            return
        else:
            anw = exe(f"{rpqsev} sudo --askpass mkfs.ext4 /dev/mapper/{conRndName}") # why output in errno?
            pout(f":{anw[0]}\n:{anw[1]}\n:{anw[2]}")
            time.sleep(5)
            anw = exe_orErrorShow(f"{rpqsev} sudo --askpass cryptsetup luksClose {conRndName}")
            if(anw[3] == True):
                return

        pout("\n===== filecryptodisk created =====")
        ifMsg(f"filecryptodisk {filePath} created", 2)

class OpenCryptoDiskWidget(QWidget):
    '''
    user in:
        where file
        where mount
        name of container
        password
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __fileLabel = None
    __mountLabel = None
    __containerLabel = None
    __passwordLabel = None
    __fileText = None
    __mountText = None
    __containerText = None
    __passwordText = None
    __readOnlyCheckBox = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__fileLabel = QLabel("filecryptodisk path: ", self)
        self.__mountLabel = QLabel("Where filecryptodisk will be open: ", self)
        self.__containerLabel = QLabel("Container name: ", self)
        self.__passwordLabel = QLabel("filecryptodisk password: ", self)
        self.__fileText = FileChooser(2, self)
        self.__mountText = FileChooser(3, self)
        self.__containerText = QLineEdit(self)
        #self.__containerText.setText(path.basename(getNormalizedName(path)))
        self.__passwordText = QLineEdit(self)
        self.__passwordText.setEchoMode(QLineEdit.Password)
        self.__readOnlyCheckBox = QCheckBox("Read only")
        self.__readOnlyCheckBox.setChecked(False)

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__fileLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__fileText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__mountLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__mountText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__containerLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__containerText, 3, 1, 1, 1)
        self.__grid.addWidget(self.__passwordLabel, 4, 0, 1, 1)
        self.__grid.addWidget(self.__passwordText, 4, 1, 1, 1)
        self.__grid.addWidget(self.__readOnlyCheckBox, 5, 0, 1 , 2)
        self.__grid.addWidget(self.__startButton, 6, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__fileText.getPath() == None):
            ifMsg("Enter filecryptodisk path", 4)
            return False
        if(self.__mountText.getPath() == None):
            ifMsg("Enter where filecryptodisk will be open", 4)
            return False
        if(self.__containerText.text() == ""):
            ifMsg("Enter container name", 4)
            return False
        if(self.__passwordText.text() == ""):
            ifMsg("Enter filecryptodisk password", 4)
            return False

    def __startButton_handler(self):
        self.__progressText.setText("=====Please wait, filecryptodisk is opening...=====")
        self.__progressText.repaint()

        self.__startButton_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButton_handler2(self):
        if(self.ifFieldsFilled() == False):
            return

        global rpqsev
        global sysuser
        filePath = os.path.abspath(self.__fileText.getPath())
        mountPath = os.path.abspath(self.__mountText.getPath())
        container = self.__containerText.text()
        pswd = self.__passwordText.text()
        readOnly = ""
        if(self.__readOnlyCheckBox.isChecked() == True):
            readOnly = " -o ro"

        pout(f"> echo -n *** | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {container} -")
        anw = exe_orErrorShow(f"echo -n \"{pswd}\" | {rpqsev} sudo --askpass cryptsetup luksOpen {filePath} {container} -", False)
        if(anw[3] == True):
            return
        anw = exe_orErrorShow(f"{rpqsev} sudo --askpass mount{readOnly} /dev/mapper/{container} {mountPath}")
        if(anw[3] == True):
            return
        if(readOnly == ""):
            anw = exe_orErrorShow(f"{rpqsev} sudo --askpass chown -R {sysuser} {mountPath}")
            if(anw[3] == True):
                return

        pout("\n===== filecryptodisk opened =====")
        ifMsg(f"filecryptodisk {filePath} opened", 2)

class CloseCryptoDiskWidget(QWidget):
    '''
    user in:
    container name
    mounted dir
    '''

    __grid = None

    __startButton = None

    __progressText = None
    __containerLabel = None
    __mountLabel = None
    __containerText = None
    __mountText = None

    __closeOnlyCheckBox = None

    def __init__(self):
        super().__init__()
        self.__grid = QGridLayout()

        self.__progressText = QLabel("Input data below: ", self)
        self.__containerLabel = QLabel("Container name: ", self)
        self.__mountLabel = QLabel("Where filecryptodisk will be open: ", self)
        self.__containerText = QLineEdit(self)
        self.__mountText = FileChooser(3, self)
        self.__closeOnlyCheckBox = QCheckBox("Close container only")
        self.__closeOnlyCheckBox.setChecked(False)
        self.__closeOnlyCheckBox.setToolTip("If active: Will try to unmount the directory\
where the container was opened, and not just close the container\n\
If inactive: Just close opened luks container")

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__progressText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__containerLabel, 1, 0, 1, 1)
        self.__grid.addWidget(self.__containerText, 1, 1, 1, 1)
        self.__grid.addWidget(self.__mountLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__mountText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__closeOnlyCheckBox, 3, 1, 1, 1)
        self.__grid.addWidget(self.__startButton, 4, 0, 1 , 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__containerText.text() == ""):
            ifMsg("Enter container name", 4)
            return False
        if(self.__closeOnlyCheckBox.isChecked() == False):
            if(self.__mountText.getPath() == None):
                ifMsg("Enter where filecryptodisk will be open", 4)
                return False

    def __startButton_handler(self):
        self.__progressText.setText("=====Please wait, filecryptodisk is closing...=====")
        self.__progressText.repaint()

        self.__startButton_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButton_handler2(self):
        if(self.ifFieldsFilled() == False):
            return

        global rpqsev
        container = self.__containerText.text()

        if(self.__closeOnlyCheckBox.isChecked() == False):
            mountPath = os.path.abspath(self.__mountText.getPath())
            anw = exe_orErrorShow(f"{rpqsev} sudo --askpass umount {mountPath}")
            if(anw[3] == True):
                return
        anw = exe_orErrorShow(f"{rpqsev} sudo --askpass cryptsetup luksClose {container}")
        if(anw[3] == True):
            return

        pout("\n===== filecryptodisk closed =====")
        ifMsg(f"filecryptodisk {container} closed", 2)

class InfoCryptoDiskWidget(QWidget):
    '''
    user in:
                             true/false dir hierarchy
    container name           mounted dir
    '''
    __grid = None

    __startButtonInfo = None
    __startButtonHash = None

    __mainInfoText = None
    __progressText = None

    __infoWelcomeLabel = None
    __hashWelcomeLabel = None

    __infoLabel = None
    __infoText = None
    __hashLabel = None
    __hashText = None
    __hashCheckBox = None

    def __init__(self):
        super().__init__()
        self.__grid = QGridLayout()

        self.__mainInfoText = QLabel("Before using this, you need to open the container", self)
        #self.__infoText.setReadOnly(True) QTextEdit
        self.__progressText = QLabel("Input data below: ", self)
        self.__infoWelcomeLabel = QLabel("Look info", self)
        self.__hashWelcomeLabel = QLabel("Look hash", self)
        self.__infoLabel = QLabel("Container name: ", self)
        self.__infoText = QLineEdit(self)
        self.__hashLabel = QLabel("Where filecryptodisk opened: ", self)
        self.__hashText = FileChooser(3, self)
        self.__hashCheckBox = QCheckBox("Directory hierarchy", self)
        self.__hashCheckBox.setChecked(True)

        self.__startButtonInfo = QPushButton("Get info", self)
        self.__startButtonInfo.clicked.connect(lambda:self.__startButtonInfo_handler())
        self.__startButtonHash = QPushButton("Get hash", self)
        self.__startButtonHash.clicked.connect(lambda:self.__startButtonHash_handler())

        self.__grid.addWidget(self.__mainInfoText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__progressText, 1, 0, 1, 2)
        self.__grid.addWidget(self.__infoWelcomeLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__hashWelcomeLabel, 2, 1, 1, 1)
        self.__grid.addWidget(self.__infoLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__hashLabel, 3, 1, 1, 1)
        self.__grid.addWidget(self.__infoText, 4, 0, 2, 1)
        self.__grid.addWidget(self.__hashText, 4, 1, 1, 1)
        self.__grid.addWidget(self.__hashCheckBox, 5, 1, 1, 1)
        self.__grid.addWidget(self.__startButtonInfo, 6, 0, 1, 1)
        self.__grid.addWidget(self.__startButtonHash, 6, 1, 1, 1)

        self.setLayout(self.__grid)

    def __startButtonInfo_handler(self):
        self.__progressText.setText("=====Please wait, getting info of filecryptodisk...=====")
        self.__progressText.repaint()

        self.__startButtonInfo_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButtonInfo_handler2(self):
        if(self.__infoText.text() == ""):
            ifMsg("Enter container name", 4)
            return

        global rpqsev
        container = self.__infoText.text()

        anw = exe_orErrorShow(f"{rpqsev} sudo --askpass cryptsetup -v status {container}")
        if(anw[3] == True):
            return

        pout(f"\n===== filecryptodisk info =====\n{anw[0]}")
        ifMsg(f"filecryptodisk {container} info: \n\n{anw[0]}", 2)

    def __startButtonHash_handler(self):
        self.__progressText.setText("=====Please wait, getting hash of filecryptodisk...=====")
        self.__progressText.repaint()

        self.__startButtonHash_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButtonHash_handler2(self):
        if(self.__hashText.getPath() == None):
            ifMsg("Enter folder, where container opened", 4)
            return

        mountPath = os.path.abspath(self.__hashText.getPath())

        is_dirHierarchy = self.__hashCheckBox.isChecked()
        hash = self.calcHashOpenedContainer(mountPath, is_dirHierarchy)

        pout(f"\n===== filecryptodisk hash =====\n{hash}")
        ifMsg(f"filecryptodisk hash: \n\n{hash}", 2)
        
    def calcHashOpenedContainer(self, mount_path : str, hierarchyConsider : bool = True) -> str:
        files_buff = [os.path.join(path, name) for path, subdirs, files in os.walk(mount_path) for name in files]
        x = []
        for i in range(len(files_buff)):
            file_i = files_buff[i]
            rel_file = os.path.relpath(file_i, mount_path)
            x.append(rel_file)
        dirs_buff = [os.path.join(path, name) for path, subdirs, files in os.walk(mount_path) for name in subdirs]
        for i in range(len(dirs_buff)):
            file_i = dirs_buff[i]
            rel_file = os.path.relpath(file_i, mount_path)
            x.append(rel_file)

        x = sorted(x)
        files = sorted(files_buff)
        #print(x)
        #print(files)

        from io import StringIO
        o = StringIO()
        for file_i in files:
            o.write(getHashOfFile(  os.path.abspath(file_i)  ))
        hash_files = getHashOfString(o.getvalue())

        o = StringIO()
        for item in x:
            o.write(item)
        hash_hierarchy = getHashOfString(o.getvalue())

        if(hierarchyConsider):
            return getHashOfString(hash_files + hash_hierarchy)
        else:
            return hash_files


class CreateRamDiskWidget(QWidget):
    '''
    sudo mount -t tmpfs -o size=sizeM tmpfs dir
    sudo mount -t tmpfs -o remount,size=sizeM tmpfs dir
    sudo umount dir
    sudo chown -R sysuser mountPath

    user in:
    mount path
    size
    resizeCheckbox
    '''

    __grid = None

    __startButton = None

    __mainInfoText = None
    __progressText = None

    __mountLabel = None
    __mountText = None
    __sizeLabel = None
    __seizeText = None
    __resizeCheckBox = None

    def __init__(self):
        super().__init__()

        self.__grid = QGridLayout()
        
        self.__mainInfoText = QLabel("If size==0: RAM disk will be close. \nIf resize checkbox active: \
Size of RAM disk will be changed without closing, and all data will remain in place", self)
        self.__progressText = QLabel("Input data below: ", self)
        self.__mountLabel = QLabel("Where RAM disk will be opened: ", self)
        self.__mountText = FileChooser(3, self)
        self.__sizeLabel = QLabel("Size of RAM disk (MB): ", self)
        self.__sizeLabel.setToolTip("if size==0, RAM disk will be closed")
        self.__sizeText = QLineEdit(self)
        self.__sizeText.setToolTip("if size==0, RAM disk will be closed")
        self.__resizeCheckBox = QCheckBox("Resize", self)
        self.__resizeCheckBox.setChecked(False)
        self.__resizeCheckBox.setToolTip("If active: Size of RAM disk will be changed without closing. \
All data will remain in place")

        self.__startButton = QPushButton("Start", self)
        self.__startButton.clicked.connect(lambda:self.__startButton_handler())

        self.__grid.addWidget(self.__mainInfoText, 0, 0, 1, 2)
        self.__grid.addWidget(self.__progressText, 1, 0, 1, 2)
        self.__grid.addWidget(self.__mountLabel, 2, 0, 1, 1)
        self.__grid.addWidget(self.__mountText, 2, 1, 1, 1)
        self.__grid.addWidget(self.__sizeLabel, 3, 0, 1, 1)
        self.__grid.addWidget(self.__sizeText, 3, 1, 1, 1)
        self.__grid.addWidget(self.__resizeCheckBox, 4, 0, 1, 2)
        self.__grid.addWidget(self.__startButton, 5, 0, 1, 2)

        self.setLayout(self.__grid)

    def ifFieldsFilled(self) -> bool:
        if(self.__mountText.getPath() == None):
            ifMsg("Enter where RAM disk", 4)
            return False
        if(is_int(self.__sizeText.text()) == False):
            ifMsg("Size of RAM disk is not number or empty", 4)
            return False
        elif(int(self.__sizeText.text()) < 0):
            ifMsg("Size of RAM disk cannot be negative", 4)
            return False

    def __startButton_handler(self):
        self.__progressText.setText("=====Please wait, RAM disk is opening/closing/resizing...=====")
        self.__progressText.repaint()

        self.__startButton_handler2()

        self.__progressText.setText("Input data below: ")
        self.__progressText.repaint()

    def __startButton_handler2(self):
        if(self.ifFieldsFilled() == False):
            return

        global rpqsev
        global sysuser
        mountPath = os.path.abspath(self.__mountText.getPath())
        size = int(self.__sizeText.text())

        if(size == 0): # RAM Close
            anw = exe_orErrorShow(f"{rpqsev} sudo --askpass umount {mountPath}")
            if(anw[3] == True):
                return
        else:          # RAM Open/Resize
            if(self.__resizeCheckBox.isChecked() == True): # RAM Resize
                anw = exe_orErrorShow(f"{rpqsev} sudo --askpass mount -t tmpfs -o remount,size={size}M tmpfs {mountPath}")
                if(anw[3] == True):
                    return
            else:                                          # RAM Open
                anw = exe_orErrorShow(f"{rpqsev} sudo --askpass mount -t tmpfs -o size={size}M tmpfs {mountPath}")
                if(anw[3] == True):
                    return
                anw = exe_orErrorShow(f"{rpqsev} sudo --askpass chown -R {sysuser} {mountPath}")
                if(anw[3] == True):
                    return

        pout("\n===== RAM disk opened/closed/resized =====")
        ifMsg(f"RAM disk {mountPath} opened/closed/resized", 2)

def get_ico_png():
    from PIL import ImageQt
    from PIL import Image
    from io import BytesIO
    imageBytes = b"\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x31\x00\x00\x00\x2b\x08\x06\x00\x00\x00\xd1\xd1\x60\xe1\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0e\xc4\x00\x00\x0e\xc4\x01\x95\x2b\x0e\x1b\x00\x00\x07\xbb\x49\x44\x41\x54\x68\x81\xed\x99\xcb\x6f\x13\xdb\x1d\xc7\x3f\x67\xc6\xcf\xd8\x79\x59\x49\x1c\x3b\x8e\x89\xf3\x80\x70\x41\xbc\x4a\x94\x9b\x0b\x12\x54\x11\x34\xba\x0b\x84\x58\xb4\x6a\xab\x2e\xaa\x76\xd1\x4a\x55\xa5\xaa\x77\xd9\x7f\xa1\x9b\x6e\x7a\x2b\x75\xc1\xa2\xa2\x65\x81\x28\x5b\x44\x1b\xf5\x16\x16\x10\x89\xe4\x2a\xbd\x80\xf3\x20\xb1\x8d\x13\x27\xd8\x09\x38\x7e\xc4\x63\x7b\x4e\x17\x49\x86\xf8\xda\x8e\xf3\x02\xba\xe8\x57\xb2\x94\xf1\x9c\x39\xf3\xfb\xe4\xf7\xfb\xcd\xf9\x9e\xb1\x90\x52\x4a\x3e\x92\xa4\x94\xa4\xd3\x69\xf2\xf9\x3c\x36\x9b\x0d\x9b\xcd\x86\x10\x62\xcf\xf3\x98\xde\x43\x6c\x3b\x4a\xd3\x34\xbe\xf9\xe6\x1b\x9e\x3d\x7b\x46\x24\x12\x41\xd3\x34\xa4\x94\x08\x21\x70\x3a\x9d\x74\x75\x75\x71\xea\xd4\x29\xba\xbb\xbb\x51\x14\x65\x57\x73\x8a\x0f\x95\x09\x29\x25\x13\x13\x13\x8c\x8e\x8e\xb2\xb6\xb6\x46\x5d\x5d\x1d\x9d\x9d\x9d\xb8\x5c\x2e\xcc\x66\x33\xd9\x6c\x96\xe5\xe5\x65\xa2\xd1\x28\x85\x42\x01\x8f\xc7\xc3\xc8\xc8\x08\x7e\xbf\xbf\xe6\xdc\x1f\x04\x22\x97\xcb\x71\xef\xde\x3d\x9e\x3f\x7f\x4e\x4b\x4b\x0b\x97\x2e\x5d\xe2\xd8\xb1\x63\x98\xcd\xe6\x92\x71\x52\x4a\xb2\xd9\x2c\xe3\xe3\xe3\x3c\x7a\xf4\x88\x5c\x2e\xc7\xe5\xcb\x97\xb9\x78\xf1\xe2\x8e\x65\x76\xa8\x10\x9a\xa6\xa1\xeb\x3a\xaa\xaa\x1a\x01\xe6\x72\x39\x6e\xdd\xba\x45\x38\x1c\x66\x70\x70\x90\xe1\xe1\xe1\xb2\xe0\x2b\x29\x99\x4c\x72\xf7\xee\x5d\xe6\xe7\xe7\x19\x1a\x1a\xe2\xca\x95\x2b\x55\x41\x0e\x05\x22\x16\x8b\xb1\xb8\xb8\x48\xb1\x58\xc4\x6a\xb5\x92\xcb\xe5\x00\xf0\xfb\xfd\x8c\x8e\x8e\xf2\xe2\xc5\x0b\x86\x87\x87\xb9\x70\xe1\xc2\x9e\x1a\x37\x9f\xcf\x73\xe7\xce\x1d\x82\xc1\x20\x23\x23\x23\x0c\x0e\x0e\x56\x1c\x77\xa0\xc6\x96\x52\x32\x3d\x3d\x4d\x36\x9b\xe5\xf8\xf1\xe3\x58\xad\xd6\x92\x20\xc7\xc6\xc6\x78\xf1\xe2\x05\x3d\x3d\x3d\x9c\x3c\x79\x72\xcf\x4f\x1e\xb3\xd9\xcc\x8d\x1b\x37\xb8\x79\xf3\x26\x0f\x1e\x3c\xa0\xab\xab\x0b\xb7\xdb\x5d\x36\x6e\x77\xed\xbf\xa9\xe5\xe5\x65\x26\x26\x26\x88\xc5\x62\x68\x9a\x46\x3c\x1e\x67\x7d\x7d\x9d\x13\x27\x4e\x94\x3d\x1e\x53\xa9\x14\xa3\xa3\xa3\xb8\xdd\x6e\xae\x5d\xbb\x46\x30\x18\xa4\x50\x28\xec\x09\x02\xc0\x62\xb1\x70\xfd\xfa\x75\x00\xee\xdf\xbf\x4f\xa5\xc2\xd9\x35\x44\x26\x93\x21\x14\x0a\x11\x08\x04\x48\xa5\x52\x8c\x8f\x8f\x33\x33\x33\x43\x63\x63\x23\xaa\xaa\x96\x8d\x7f\xfc\xf8\x31\xd9\x6c\x96\xab\x57\xaf\xd2\xd0\xd0\x40\x5b\x5b\x1b\xd1\x68\x74\xcf\x10\x00\xad\xad\xad\x0c\x0c\x0c\xf0\xf2\xe5\x4b\xc2\xe1\xf0\xfe\x21\x22\x91\x08\x3e\x9f\x8f\xc6\xc6\x46\x7a\x7b\x7b\x19\x18\x18\xc0\xed\x76\x13\x0e\x87\x79\xf2\xe4\x09\x33\x33\x33\xc6\x58\x4d\xd3\x78\xfa\xf4\x29\x9d\x9d\x9d\x04\x02\x01\x00\xbc\x5e\x2f\xaf\x5f\xbf\xde\x17\x84\x10\x82\xa1\xa1\x21\x4c\x26\x13\x63\x63\x63\xfb\x83\xc8\x66\xb3\xa4\x52\xa9\x92\x7a\x5c\x58\x58\x60\x79\x79\x19\xbf\xdf\xcf\xb9\x73\xe7\x58\x59\x59\x31\xce\xcd\xce\xce\x92\xc9\x64\x38\x7f\xfe\xbc\x51\x62\x66\xb3\xb9\x62\x29\xec\x56\x4e\xa7\x93\xa3\x47\x8f\x32\x3d\x3d\x8d\xa6\x69\x7b\x87\xd8\xca\xc2\xf6\x15\x54\x51\x14\x2c\x16\x0b\x85\x42\x81\x85\x85\x05\xda\xdb\xdb\x8d\x73\xc1\x60\x10\xb3\xd9\x4c\x5f\x5f\x9f\xf1\x5d\x22\x91\xa0\xae\xae\x6e\xdf\x10\x42\x08\xfa\xfb\xfb\xd1\x34\x8d\xf9\xf9\xf9\xbd\x41\xe8\xba\xce\xca\xca\x0a\xad\xad\xad\x65\x93\xd6\xd7\xd7\xb3\xbe\xbe\x4e\x22\x91\x30\x20\x74\x5d\x27\x14\x0a\xe1\xf5\x7a\xb1\xd9\x6c\x00\x14\x8b\x45\x22\x91\x08\x47\x8e\x1c\xd9\x37\x04\x60\x5c\x1f\x89\x44\xf6\x06\xb1\xf5\x5f\xfe\xb6\x8f\xf1\x78\x3c\xf4\xf6\xf6\x62\x36\x9b\x51\x55\x15\x5d\xd7\x01\x48\xa7\xd3\x24\x93\x49\x7c\x3e\x1f\x42\x08\x8a\xc5\x22\x53\x53\x53\xb8\x5c\x2e\x9c\x4e\xe7\x81\x20\x9c\x4e\x27\x0d\x0d\x0d\x2c\x2d\x2d\x95\x7c\x5f\x73\x9d\x48\x24\x12\xf4\xf6\xf6\x56\x3c\x27\x84\x20\x9f\xcf\xe3\x70\x38\x98\x9c\x9c\xc4\x6a\xb5\x22\xa5\xa4\xab\xab\x8b\xe6\xe6\x66\x42\xa1\x10\x89\x44\x02\x97\xcb\x75\xe0\x2c\x6c\xdd\xaf\xa9\xa9\xa9\xa4\xff\x6a\x42\xa4\x52\x29\x0a\x85\x42\xd5\x5a\xd6\x75\x9d\x74\x3a\x4d\x7f\x7f\x3f\x81\x40\xc0\x70\xa8\x6f\xde\xbc\xc1\x62\xb1\x60\x32\x99\xe8\xeb\xeb\xa3\xbe\xbe\xfe\xc0\x00\x5b\x10\x4e\xa7\x73\x6f\x99\x08\x85\x42\xd8\xed\x76\xf2\xf9\x3c\x16\x8b\xa5\xec\x7c\x3c\x1e\xc7\xe9\x74\x1a\xeb\x84\xdd\x6e\x47\xd3\x34\x56\x56\x56\xf0\x78\x3c\xb4\xb4\xb4\x1c\x4a\xf0\xdb\x65\xb5\x5a\xc9\xe7\xf3\xe8\xba\x6e\x94\xf8\x8e\x3d\xd1\xdd\xdd\x8d\xc3\xe1\x60\x6c\x6c\x8c\xc9\xc9\x49\x96\x96\x96\x0c\xff\x0f\x1b\x0d\xf6\x6d\xab\xbc\xe5\x9b\x76\x63\xf2\xf6\x23\x45\x51\x90\x52\x52\x2c\x16\x8d\xef\x76\xcc\x84\x10\x82\xa5\xa5\x25\xbc\x5e\xaf\xb1\xb0\x05\x83\x41\x1a\x1b\x1b\x69\x6f\x6f\x47\x55\xd5\x92\x66\x4d\xe7\x8a\xac\x6b\x45\xa4\x84\xb4\x26\x21\xb3\x77\x9b\x51\x4b\xeb\xda\xc6\x9c\x29\x4d\xe2\x10\x3a\x16\x93\x52\xdd\xc5\xae\xae\xae\x32\x35\x35\x45\x47\x47\x07\x3e\x9f\x0f\xd8\xb0\xc7\x73\x73\x73\x74\x74\x74\xb0\xb8\xb8\x88\xdb\xed\xa6\xad\xad\xcd\xb8\xe6\x87\x5f\x3e\x27\x38\x33\x47\xbf\x35\xca\xbf\x32\x27\x28\xca\x1d\xf6\x00\xfb\xd8\x86\x02\x04\xcc\x4b\x74\x98\x12\x3c\xcc\x7e\xc2\xef\x7f\xd0\xcd\x8f\x3e\x6d\xab\x9e\x89\x42\xa1\x80\xc9\x64\x32\x00\x60\xc3\x00\xb6\xb7\xb7\xd3\xd2\xd2\x52\xb5\xde\x17\x8b\x2e\x16\xd2\xcd\x28\x02\x8e\xb7\xdb\x70\xda\x4a\x2b\x56\x4a\x98\x8c\x66\xc9\x15\xe4\xbe\x40\xe6\xf2\x6e\xe6\xf2\xa5\x4e\xb6\x2a\x84\xa6\x69\x38\x1c\x0e\xe3\x38\x9f\xcf\xb3\xba\xba\x5a\xf3\x51\x29\xa5\xa4\xc1\xa6\xf2\xe7\x9f\xf8\x39\xd3\x59\xf9\xa9\xf6\xe0\x59\x92\x5f\xdd\x8e\xa0\xef\xd1\x86\x54\x83\xae\x0a\x11\x8d\x46\x39\x7d\xfa\xb4\x71\xbc\xb6\xb6\x46\x73\x73\x73\xcd\x86\x15\xc0\x4f\x3f\x73\x71\xa6\xb3\x8e\x07\xcf\x93\xbc\x8c\x6f\xf3\x39\x52\x72\xfe\x88\x83\xe1\x4f\x1a\xf8\xed\x95\x36\x1e\xce\x66\x76\x15\x7c\x3a\x57\xe4\x3f\x0b\x59\x74\xbd\x72\xf6\xaa\x42\x48\x29\x4b\x0c\x5b\x34\x1a\xc5\xeb\xf5\xd6\xbc\xa1\x0e\x1c\x6d\xb3\x51\xd4\x25\xbf\xbb\xb7\xc0\x4a\xa6\x58\x72\xbe\xb9\x4e\xe5\xef\xbf\xec\xe1\x67\x9f\xb5\x70\xb6\x33\x4b\x36\xaf\xd7\x9c\xb3\xa0\x4b\xfe\x31\xb9\xcc\xed\xf1\x34\x28\x6a\x19\x48\x55\x88\x40\x20\xc0\xc4\xc4\x04\x3d\x3d\x3d\x38\x1c\x0e\x34\x4d\xc3\xe5\x72\xd5\xbc\x21\xc0\xd6\x3d\x24\xe5\x25\xb0\x9a\x29\xf2\xeb\xbf\x45\xf8\xf2\xc7\x7e\xce\x1f\xd9\xbd\x21\xfc\xb4\xcb\xce\xc4\xec\x18\xc1\xa4\xa3\x0c\xa4\x22\x44\xa1\x50\x60\x6d\x6d\xcd\xf8\x7b\x7e\x7e\xde\xf0\x42\x07\x95\x10\x82\xaf\xa3\x59\xae\xfe\x61\x9a\x33\xbe\x3a\x6c\x8a\x06\x72\x7b\xb6\xe4\xe6\xe7\xdd\x61\x57\x8b\x8d\x2f\x3e\xef\xe6\xe7\xdf\xf5\xf3\xc5\xed\x59\xb0\x35\x81\xf2\x6e\x23\x56\x11\x42\xd7\x75\x62\xb1\x18\x3d\x3d\x3d\x34\x34\x34\x10\x0e\x87\xe9\xef\xef\x3f\x30\xc0\x76\x90\xb5\x75\x9d\x7f\xcf\xa4\xaa\x8c\x28\x6d\x78\xcb\x5c\x96\xdf\x7c\x4f\xe2\x69\xb2\xa1\x23\x50\x0b\xeb\x48\x93\xdd\x18\x55\x11\xc2\x64\x32\x61\xb3\xd9\x70\x3a\x9d\xbc\x7a\xf5\x0a\xbf\xdf\xbf\xeb\xb7\x71\xbb\xd5\xce\x59\x15\x55\x0e\x05\x42\xa8\x20\x54\xd0\x0b\x20\x37\xfa\xa9\x62\x64\x33\x33\x33\x86\xbd\x4e\x26\x93\x15\xdf\x30\x7c\x14\x09\x40\x35\x81\x50\x10\x8a\xc2\x16\x5d\xc5\x4c\xa8\xaa\x4a\x47\x47\x87\xb1\xb8\x1d\x76\x16\xf6\x2b\xa1\xa8\x1b\x1f\x55\xdd\x00\xd9\xcc\x66\x59\x74\xb1\x58\x8c\x78\x3c\x8e\xdd\x6e\x27\x91\x48\xe0\xf1\x78\x3e\x78\xb0\x3b\x6a\xb3\x9c\xc4\xb6\x92\x2b\x83\xc8\xe5\x72\xb4\xb6\xb6\x12\x8f\xc7\xf1\xf9\x7c\x15\x5f\xc7\x7c\x4c\x09\xb1\x19\xbe\xd8\x01\xc2\xeb\xf5\xf2\xf6\xed\x5b\x62\xb1\xd8\xae\xd7\x85\x0f\x2a\x21\x4a\x00\xa0\x42\x4f\x98\xcd\x66\xce\x9e\x3d\xfb\xc1\x62\x3a\x0c\xfd\x6f\x74\xec\x01\xf5\x7f\x88\x8f\xa2\x0a\xee\xfd\xd0\x7f\xb3\x13\x60\x6c\x78\xea\xad\x2a\x89\x74\xb1\xe6\x35\xb5\xd4\x6c\x57\x11\x02\xd6\xf3\x7a\xd9\x62\x0e\xef\xe9\x87\xc7\xaf\xa6\x53\x7c\x7e\xb2\x91\x3b\xbf\xe8\xe6\x6d\xf6\xe0\x10\xf5\x56\x05\x45\x11\x7c\x35\xf5\xb6\x64\x7d\xd8\xd2\x7b\x81\xb8\xf7\xf5\x1b\xda\x1c\xf0\xfd\xef\x34\xe1\xb4\xaa\x80\x28\xa9\x02\x81\x28\xf1\x43\x15\x6b\x64\x9b\x32\x5a\x81\xbf\x3e\x8e\xf1\x97\xc7\x09\x50\x6c\x65\xe7\x0f\xbf\x9c\x84\x40\x97\x92\x3f\x3d\x5c\xe5\x8f\xff\x0c\x21\xb4\xe4\xe6\xb3\x5d\x45\x08\xd3\x86\x85\xde\x66\x1d\x10\x4a\xa5\x0a\x29\x91\xd4\x41\x0a\x05\x84\xb5\xe2\xd8\xf7\x92\x09\xc3\xd3\x58\x1b\x91\xa6\x3a\x64\x3e\x8b\x50\x54\xa4\x78\x17\x38\xca\x3b\x80\x9a\x3b\x6d\x75\x7b\xe2\xde\x73\x39\xf5\x7b\xea\x2a\x6e\x37\xa5\x5e\x04\xbd\x08\x08\x50\x04\x42\x28\x80\x52\xb1\x49\xf7\xa2\xd6\xfa\x8d\xfd\xfe\x7f\x01\xf7\xcf\x12\x40\x08\x99\x98\x8a\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82"
    stream = BytesIO(imageBytes)
    image = Image.open(stream).convert("RGBA")
    stream.close()
    return QtGui.QIcon(QtGui.QPixmap.fromImage(ImageQt.ImageQt(image)))

if __name__ == '__main__':

    RootPassQueScript = None
    rpqsev = None
    sysuser = None

    app = QApplication(sys.argv)

    mainWidget = MainWidget()
    mainWidget.setWindowTitle("filecryptodisk")
    #mainWidget.setWindowIcon( QtGui.QIcon("./ico.png") )
    mainWidget.setWindowIcon(get_ico_png())
    sys.exit(app.exec_())